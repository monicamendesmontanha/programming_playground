.container {
  display: grid;
  width: 100%;

  /* grid-template-columns: 1fr 1fr 1fr; */
  /* >>>>> refactor the previous code */
  /* grid-template-columns: repeat(3, 1fr); */
  /* >>>>> change the first column and the another ones will be iguals each other */
  /* grid-template-columns: 200px repeat(2, 1fr); */
  /* >>>>> When declaring track sizes, you can use fixed sizes with units such as px and em. You can also use flexible sizes such as percentages or the fr unit. The real magic of CSS Grid Layout, however, is the ability to mix these units. The best way to understand is with an example: */
  grid-template-columns: 100px 30% 2fr 1fr;


  /* grid-template-rows: 150px 150px; */
  /* grid-template-rows: repeat(2, 150px); */
  grid-template-rows: 200px 100px;

  grid-gap: 1rem;
}

div {
 border: 1px solid blue;
}

.item1 {
  /* grid-row-start: 2;
  grid-row-end: 3;
  grid-column-start: 2;
  grid-column-end: 3; */

  /* >>>>> Shorthand property */
  grid-row: 2 / 3;
  grid-column: 2 / 3;
}